name: Update Apk

on: workflow_dispatch
#on:
#  workflow_dispatch:
#  schedule:
#  - cron: "30 1 * * *"

jobs:
  update:
    name: Update Apk
    runs-on: ubuntu-latest
    steps:
      - name: Get Apk And Info
        id: app
        run: |
          mkdir dist
          export JSON=$(curl -L 'https://api.github.com/repos/ejiaogl/FuckCoolapk/releases/latest')
          export JSON2=$(curl -L 'https://api.github.com/repos/Xposed-Modules-Repo/com.fuckcoolapk/releases/latest')
          export TAG_NAME=$(echo $JSON | jq -r '.tag_name')
          export TAG_NAME2=$(echo $JSON | jq -r '.tag_name')
          if [ "$TAG_NAME" == "$TAG_NAME2" ]; then
            curl -H "Authorization: token {{ secrets.GITHUB_TOKEN }}" -X POST "https://api.github.com/repos/Xposed-Modules-Repo/com.fuckcoolapk/actions/runs/${{ github.run_id }}/cancel"
          fi
          export RELEASE_NAME=$(echo $JSON | jq -r '.name')
          echo -e $(echo $JSON | jq .body | tr  '[:cntrl:]' '\n' | sed -e 's/"//g') > dist/1.md
          cat dist/1.md
          export FILE_NAME=$(echo $JSON | jq -r '.assets[1].name')
          export APK_PATH="dist/${FILE_NAME}"
          echo "::set-output name=TAG_NAME::${TAG_NAME}"
          echo "::set-output name=RELEASE_NAME::${RELEASE_NAME}"
          echo "::set-output name=BODY::${BODY}"
          echo "::set-output name=FILE_NAME::${FILE_NAME}"
          echo "::set-output name=APK_PATH::${APK_PATH}"
          curl -Lo "$APK_PATH" $(echo $JSON | jq -r '.assets[1].browser_download_url')
          
      - name: Github Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.app.outputs.TAG_NAME}}
          release_name: ${{steps.app.outputs.RELEASE_NAME}}
          body_path: dist/1.md
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{steps.app.outputs.APK_PATH}}
          asset_name: ${{steps.app.outputs.FILE_NAME}}
          asset_content_type: application/zip
